# Challenge: Remove Duplicates from Linked List


class Node:
    def __init__(self, data):
        self.data = data
        self.next_element = None


class LinkedList:
    def __init__(self):
        self.head_node = None

    def get_head(self):
        return self.head_node

    def is_empty(self):
        if (self.head_node is None):  # Check whether the head is None
            return True
        else:
            return False

    def insert_at_head(self, data):
        # Create a new node containing your specified value
        temp_node = Node(data)
        # The new node points to the same node as the head
        temp_node.next_element = self.head_node
        self.head_node = temp_node  # Make the head point to the new node
        return self.head_node  # return the new list

    def remove_duplicates(self, lst):
        # Write - Your - Code
        current = lst.get_head()
        prev = None
        dicti = {}
        while current is not None:
            if dicti.get(current.data, None) is not None:
                prev.next_element = current.next_element
                current = prev.next_element
                continue
            else:
                dicti[current.data] = True
            prev = current
            current = current.next_element
        return

    def search(lst, value):
        # Write your code here
        pass
        current_node = lst.get_head()
        while current_node.next_element is not None:
            if current_node.data is value:
                return True
            current_node = current_node.next_element
        return False

    # Supplementary print function

    def print_list(self):
        if (self.is_empty()):
            print("List is Empty")
            return False
        temp = self.head_node
        while temp.next_element is not None:
            print(temp.data, end=" -> ")
            temp = temp.next_element
        print(temp.data, "-> None")
        return True


def insert_at_tail(lst, value):
    temp_node = Node(data=value)
    current_node = lst.get_head()
    if current_node is None:
        lst.head_node = temp_node
    else:
        while current_node.next_element is not None:
            current_node = current_node.next_element
        current_node.next_element = temp_node


# Access head_node => list.get_head()
# Check if list is empty => list.is_empty()
# Length of the list => list.length()
# Node class  { int data ; Node next_element;}


def union(list1, list2):
    # Write your code here
    if (list1.is_empty()):
        return list2
    elif (list2.is_empty()):
        return list1
    prev = None
    current = list1.get_head()

    while current is not None:
        prev = current
        current = current.next_element
    prev.next_element = list2.get_head()
    return list1

# Returns a list containing the intersection of list1 and list2


def intersection(list1, list2):

    result = LinkedList()
    current_node = list1.get_head()

    # Traversing list1 and searching in list2
    # insert in result if the value exists
    while current_node is not None:
        value = current_node.data
        if list2.search(value) is not None:
            result.insert_at_head(value)
        current_node = current_node.next_element

    # Remove duplicates if any
    result.remove_duplicates(result)
    return result


# Testing the code
list1 = LinkedList()
list2 = LinkedList()
print("Inserting values in list at tail")
for i in range(1, 10):
    insert_at_tail(list1, i)

for i in range(5, 15):
    insert_at_tail(list2, i)

unionlist = union(list1, list2)
unionlist.print_list()
intersectionlist = intersection(list1, list2)
intersectionlist.print_list()


# solution code whiuch is not buggu
def union(list1, list2):
    # Return other List if one of them is empty
    if (list1.is_empty()):
        return list2
    elif (list2.is_empty()):
        return list1

    start = list1.get_head()

    # Traverse the first list till the tail
    while start.next_element:
        start = start.next_element

    # Link last element of first list to the first element of second list
    start.next_element = list2.get_head()
    list1.remove_duplicates()
    return list1


# Returns a list containing the intersection of list1 and list2


def intersection(list1, list2):

    result = LinkedList()
    current_node = list1.get_head()

    # Traversing list1 and searching in list2
    # insert in result if the value exists
    while current_node is not None:
        value = current_node.data
        if list2.search(value) is not None:
            result.insert_at_head(value)
        current_node = current_node.next_element

    # Remove duplicates if any
    result.remove_duplicates()
    return result
