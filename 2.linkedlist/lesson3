# Challenge: Search in a Singly Linked List

class Node:
    def __init__(self, data):
        self.data = data
        self.next_element = None


class LinkedList:
    def __init__(self):
        self.head_node = None

    def get_head(self):
        return self.head_node

    def is_empty(self):
        if (self.head_node is None):  # Check whether the head is None
            return True
        else:
            return False

    # Supplementary print function
    def print_list(self):
        if (self.is_empty()):
            print("List is Empty")
            return False
        temp = self.head_node
        while temp.next_element is not None:
            print(temp.data, end=" -> ")
            temp = temp.next_element
        print(temp.data, "-> None")
        return True


def insert_at_tail(lst, value):
    temp_node = Node(data=value)
    current_node = lst.get_head()
    if current_node is None:
        lst.head_node = temp_node
    else:
        while current_node.next_element is not None:
            current_node = current_node.next_element
        current_node.next_element = temp_node


def search(lst, value):
    # Write your code here
    pass
    current_node = lst.get_head()
    while current_node.next_element is not None:
        if current_node.data is value:
            return True
        current_node = current_node.next_element
    return False


list = LinkedList()
list.print_list()

print("Inserting values in list at tail")
for i in range(1, 10):
    insert_at_tail(list, i)
list.print_list()
print(search(lst=list, value=11))


# approach 2 recursive
def searchRecursive(node, value):

    # Base case
    if (not node):
        return False  # value not found

    # check if the node's data matches our value
    if (node.data is value):
        return True  # value found

    # Recursive call to next node in the list
    return search(node.next_element, value)
