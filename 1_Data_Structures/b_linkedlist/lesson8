# Challenge: Remove Duplicates from Linked List


class Node:
    def __init__(self, data):
        self.data = data
        self.next_element = None


class LinkedList:
    def __init__(self):
        self.head_node = None

    def get_head(self):
        return self.head_node

    def is_empty(self):
        if (self.head_node is None):  # Check whether the head is None
            return True
        else:
            return False

    # Supplementary print function
    def print_list(self):
        if (self.is_empty()):
            print("List is Empty")
            return False
        temp = self.head_node
        while temp.next_element is not None:
            print(temp.data, end=" -> ")
            temp = temp.next_element
        print(temp.data, "-> None")
        return True


def insert_at_tail(lst, value):
    temp_node = Node(data=value)
    current_node = lst.get_head()
    if current_node is None:
        lst.head_node = temp_node
    else:
        while current_node.next_element is not None:
            current_node = current_node.next_element
        current_node.next_element = temp_node


# Access head_node => list.get_head()
# Check if list is empty => list.is_empty()
# Length of the list => list.length()
# Node class  { int data ; Node next_element;}


def remove_duplicates(lst):
    # Write - Your - Code
    current = lst.get_head()
    prev = None
    dicti = {}
    while current is not None:
        if dicti.get(current.data, None) is not None:
            prev.next_element = current.next_element
            current = prev.next_element
            continue
        else:
            dicti[current.data] = True
        prev = current
        current = current.next_element
    return


# Testing the code
list = LinkedList()
print("Inserting values in list at tail")
for i in range(1, 10):
    insert_at_tail(list, i)
for i in range(1, 10):
    insert_at_tail(list, i)
list.print_list()

remove_duplicates(lst=list)
list.print_list()
